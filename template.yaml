AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:

  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  MyTopic:
    Type: AWS::SNS::Topic

  MyQueue:
    Type: AWS::SQS::Queue

  SNSPublishLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sns_handler.lambda_handler
      Runtime: python3.11
      CodeUri: ./lambda_code/
      Environment:
        Variables:
          TOPIC_ARN: !Ref MyTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt MyTopic.TopicName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /publish
            Method: POST

  SQSLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sqs_handler.lambda_handler
      Runtime: python3.11
      CodeUri: ./lambda_code/
      Environment:
        Variables:
          GITHUB_TOKEN: "{{resolve:secretsmanager:GITHUB_TOKEN}}"
      Policies:
        - AWSLambdaBasicExecutionRole
        - SQSPollerPolicy:
            QueueName: !GetAtt MyQueue.QueueName
        - AmazonRDSFullAccess  
        - Statement:
            Effect: Allow
            Action: 
              - secretsmanager:GetSecretValue
            Resource: "*"
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MyQueue.Arn
            BatchSize: 10

  CleanupRDSLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: cleanup_rds.lambda_handler
      Runtime: python3.11
      CodeUri: lambda/
      Environment:
        Variables:
          RETENTION_PERIOD: "0.0035"  
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonRDSFullAccess
        - Statement:   
            Effect: Allow
            Action: 
              - secretsmanager:GetSecretValue
            Resource: "*"
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: "rate(1 hour)" 
            Enabled: true

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/publish"

  SNSPublishLambda:
    Description: "ARN of the SNS Publish Lambda Function"
    Value: !GetAtt SNSPublishLambda.Arn

  SQSLambda:
    Description: "ARN of the SQS Consumer Lambda Function"
    Value: !GetAtt SQSLambda.Arn

  CleanupRDSLambda:
    Description: "ARN of the Cleanup RDS Lambda Function"
    Value: !GetAtt CleanupRDSLambda.Arn
